{"version":3,"sources":["node_modules/eslint/lib/shared/ast-utils.js","node_modules/eslint/lib/shared/traverser.js"],"names":["require$$0","vk"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Common utils for AST.\n *\n * This file contains only shared items for core and rules.\n * If you make a utility for rules, please see `../rules/utils/ast-utils.js`.\n *\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\nconst breakableTypePattern = /^(?:(?:Do)?While|For(?:In|Of)?|Switch)Statement$/u;\nconst lineBreakPattern = /\\r\\n|[\\r\\n\\u2028\\u2029]/u;\nconst shebangPattern = /^#!([^\\r\\n]+)/u;\n\n/**\n * Creates a version of the `lineBreakPattern` regex with the global flag.\n * Global regexes are mutable, so this needs to be a function instead of a constant.\n * @returns {RegExp} A global regular expression that matches line terminators\n */\nfunction createGlobalLinebreakMatcher() {\n    return new RegExp(lineBreakPattern.source, \"gu\");\n}\n\nmodule.exports = {\n    breakableTypePattern,\n    lineBreakPattern,\n    createGlobalLinebreakMatcher,\n    shebangPattern\n};\n","/**\n * @fileoverview Traverser to traverse AST trees.\n * @author Nicholas C. Zakas\n * @author Toru Nagashima\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst vk = require(\"eslint-visitor-keys\");\nconst debug = require(\"debug\")(\"eslint:traverser\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Do nothing.\n * @returns {void}\n */\nfunction noop() {\n\n    // do nothing.\n}\n\n/**\n * Check whether the given value is an ASTNode or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an ASTNode.\n */\nfunction isNode(x) {\n    return x !== null && typeof x === \"object\" && typeof x.type === \"string\";\n}\n\n/**\n * Get the visitor keys of a given node.\n * @param {Object} visitorKeys The map of visitor keys.\n * @param {ASTNode} node The node to get their visitor keys.\n * @returns {string[]} The visitor keys of the node.\n */\nfunction getVisitorKeys(visitorKeys, node) {\n    let keys = visitorKeys[node.type];\n\n    if (!keys) {\n        keys = vk.getKeys(node);\n        debug(\"Unknown node type \\\"%s\\\": Estimated visitor keys %j\", node.type, keys);\n    }\n\n    return keys;\n}\n\n/**\n * The traverser class to traverse AST trees.\n */\nclass Traverser {\n    constructor() {\n        this._current = null;\n        this._parents = [];\n        this._skipped = false;\n        this._broken = false;\n        this._visitorKeys = null;\n        this._enter = null;\n        this._leave = null;\n    }\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @returns {ASTNode} The current node.\n     */\n    current() {\n        return this._current;\n    }\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @returns {ASTNode[]} The ancestor nodes.\n     */\n    parents() {\n        return this._parents.slice(0);\n    }\n\n    /**\n     * Break the current traversal.\n     * @returns {void}\n     */\n    break() {\n        this._broken = true;\n    }\n\n    /**\n     * Skip child nodes for the current traversal.\n     * @returns {void}\n     */\n    skip() {\n        this._skipped = true;\n    }\n\n    /**\n     * Traverse the given AST tree.\n     * @param {ASTNode} node The root node to traverse.\n     * @param {Object} options The option object.\n     * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.\n     * @param {Function} [options.enter=noop] The callback function which is called on entering each node.\n     * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.\n     * @returns {void}\n     */\n    traverse(node, options) {\n        this._current = null;\n        this._parents = [];\n        this._skipped = false;\n        this._broken = false;\n        this._visitorKeys = options.visitorKeys || vk.KEYS;\n        this._enter = options.enter || noop;\n        this._leave = options.leave || noop;\n        this._traverse(node, null);\n    }\n\n    /**\n     * Traverse the given AST tree recursively.\n     * @param {ASTNode} node The current node.\n     * @param {ASTNode|null} parent The parent node.\n     * @returns {void}\n     * @private\n     */\n    _traverse(node, parent) {\n        if (!isNode(node)) {\n            return;\n        }\n\n        this._current = node;\n        this._skipped = false;\n        this._enter(node, parent);\n\n        if (!this._skipped && !this._broken) {\n            const keys = getVisitorKeys(this._visitorKeys, node);\n\n            if (keys.length >= 1) {\n                this._parents.push(node);\n                for (let i = 0; i < keys.length && !this._broken; ++i) {\n                    const child = node[keys[i]];\n\n                    if (Array.isArray(child)) {\n                        for (let j = 0; j < child.length && !this._broken; ++j) {\n                            this._traverse(child[j], node);\n                        }\n                    } else {\n                        this._traverse(child, node);\n                    }\n                }\n                this._parents.pop();\n            }\n        }\n\n        if (!this._broken) {\n            this._leave(node, parent);\n        }\n\n        this._current = parent;\n    }\n\n    /**\n     * Calculates the keys to use for traversal.\n     * @param {ASTNode} node The node to read keys from.\n     * @returns {string[]} An array of keys to visit on the node.\n     * @private\n     */\n    static getKeys(node) {\n        return vk.getKeys(node);\n    }\n\n    /**\n     * Traverse the given AST tree.\n     * @param {ASTNode} node The root node to traverse.\n     * @param {Object} options The option object.\n     * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.\n     * @param {Function} [options.enter=noop] The callback function which is called on entering each node.\n     * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.\n     * @returns {void}\n     */\n    static traverse(node, options) {\n        new Traverser().traverse(node, options);\n    }\n\n    /**\n     * The default visitor keys.\n     * @type {Object}\n     */\n    static get DEFAULT_VISITOR_KEYS() {\n        return vk.KEYS;\n    }\n}\n\nmodule.exports = Traverser;\n"]}